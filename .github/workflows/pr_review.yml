name: PR Discord Notification

on:
  pull_request:
    types: [opened, closed, reopened]

env:
  USERNAME: "웅? 어엉..? 이게 뭐여..! PR이잖아..?"
  AVATAR_URL: "https://i.ibb.co/dQKDmNj/test.jpg"

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Assign Random Reviewer
        id: assign-reviewer
        if: github.event.action == 'opened' || github.event.action == 'reopened'
        uses: actions/github-script@v6
        env:
          REVIEWER_MAPPING: ${{ secrets.REVIEWER_MAPPING }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const mappingJson = process.env.REVIEWER_MAPPING;
            let githubToDiscordMap;
            try {
              githubToDiscordMap = JSON.parse(mappingJson);
            } catch (error) {
              throw new Error('Invalid JSON in REVIEWER_MAPPING secret.');
            }
            
            // 리뷰어 목록을 배열로 정의 (키 리스트)
            const allReviewers = Object.keys(githubToDiscordMap);

            // PR 정보 가져오기
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });

            // PR 작성자
            const prAuthor = pullRequest.user.login;

            // 리뷰어 목록에서 PR 작성자 제외
            const reviewers = allReviewers.filter(reviewer => reviewer.toLowerCase() !== prAuthor.toLowerCase());

            if (reviewers.length === 0) {
              throw new Error('No valid reviewers available (all reviewers are PR authors).');
            }

            // 리뷰어 목록에서 랜덤으로 하나 선택
            const randomReviewer = reviewers[Math.floor(Math.random() * reviewers.length)];

            // 이미 리뷰어가 할당되어 있는지 확인
            if (pullRequest.requested_reviewers.length === 0) {
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                reviewers: [randomReviewer]
              });
              console.log(`리뷰어 ${randomReviewer}가 PR #${pullRequest.number}에 할당되었습니다.`);
              
              // Discord ID 가져오기
              const discordId = githubToDiscordMap[randomReviewer];
              if (!discordId) {
                throw new Error(`Discord ID not found for GitHub user: ${randomReviewer}`);
              }

              // 출력 변수 설정
              core.setOutput('reviewer', randomReviewer);
              core.setOutput('discord_id', discordId);
            } else {
              const existingReviewer = pullRequest.requested_reviewers[0].login;
              console.log(`이미 리뷰어 ${existingReviewer}가 할당되어 있습니다.`);
              
              // Discord ID 가져오기
              const discordId = githubToDiscordMap[existingReviewer];
              if (!discordId) {
                throw new Error(`Discord ID not found for GitHub user: ${existingReviewer}`);
              }

              // 출력 변수 설정
              core.setOutput('reviewer', existingReviewer);
              core.setOutput('discord_id', discordId);
            }
            
            

      - name: Send Discord Notification
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

        run: |
          # PR 정보 가져오기
          prTitle="${{ github.event.pull_request.title }}"
          prUser="${{ github.event.pull_request.user.login }}"
          prAction="${{ github.event.action }}"
          prUrl="${{ github.event.pull_request.html_url }}"
          prMerged="${{ github.event.pull_request.merged }}"
          prActor="${{ github.actor }}"  
          prReviewer="${{ steps.assign-reviewer.outputs.reviewer }}"
          prReviewerDiscordID="${{ steps.assign-reviewer.outputs.discord_id }}"

          if [ "$prAction" == "opened" ]; then
            MESSAGE="**📢 새로운 PR이 도착했습니다!**
          - <@${prReviewerDiscordID}> 님 리뷰어로 할당되었습니다!! 🙏
          - PR 제목 : ${prTitle}
          - 등록한 사람 : ${prUser}
          - 리뷰어 : <@${prReviewerDiscordID}>
          - 리뷰하러 가기 >> [Click](${prUrl})"
                
          elif [ "$prAction" == "closed" ] && [ "$prMerged" == "true" ]; then
            MESSAGE="**🎉 PR이 머지되었습니다!**
          - PR 제목 : ${prTitle}
          - 작업 수행자 : ${prActor}
          - PR 확인하기 >> [Click](${prUrl})"
                
          elif [ "$prAction" == "closed" ]; then
            MESSAGE="**🚨 PR이 닫혔습니다!**
          - PR 제목 : ${prTitle}
          - 작업 수행자 : ${prActor}
          - PR 확인하기 >> [Click](${prUrl})"
                
          elif [ "$prAction" == "reopened" ]; then
            MESSAGE="**🔎 PR이 다시 열렸습니다!**
          - <@${prReviewerDiscordID}> 님 리뷰어로 할당되었습니다!! 🙏
          - PR 제목 : ${prTitle}
          - 작업 수행자 : ${prActor}
          - 리뷰어 : <@${prReviewerDiscordID}>
          - 리뷰하러 가기 >> [Click](${prUrl})"
                
          else
           MESSAGE="❓ 알 수 없는 PR 이벤트: **${prTitle}** by ${prUser}. **[클릭](${prUrl})**"
          fi
          
          # JSON 형식으로 메시지 구성
          DATA=$(jq -n \
          --arg content "$MESSAGE" \
          --arg username "$USERNAME" \
          --arg avatar_url "$AVATAR_URL" \
          '{content: $content, username: $username, avatar_url: $avatar_url}')

          # Discord 웹훅으로 메시지 전송
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X POST -H 'Content-Type: application/json' -d "$DATA" "$DISCORD_WEBHOOK_URL")

          # 응답 코드 확인
          if [ "$RESPONSE" -ne 204 ]; then
            echo "Failed to send Discord notification. HTTP Status Code: $RESPONSE"
            exit 1
          fi
